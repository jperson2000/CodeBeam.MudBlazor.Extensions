@namespace MudExtensions
@inherits MudComponentBase

<CascadingValue Value="this" IsFixed="true">
    <MudStack Row="@Vertical" Class="@Class" Style="@Style">
        <div style="@GetStepperStyle()">
            <div style=@GetStepperSubStyle()>
                @{
                    MudStepExtended? currentStep = null;
                }
                @foreach (MudStepExtended step in _steps)
                {
                    if (IsStepActive(step))
                    {
                        currentStep = step;
                    }
                    if (step.IsResultStep || (MobileView == true && IsStepActive(step) == false))
                    {
                        continue;
                    }

                    <div class="@GetStepClass()" style="@GetStepPercent()">
                        <div @onclick="@(Linear ? null : () => SetActiveIndex(step))" class="@HeaderClassname">
                            @{
                                bool active = IsStepActive(step);
                            }
                            @if (step.Template != null)
                            {
                                @step.Template(step)
                            }
                            else
                            {
                                @if (step.Status == StepStatus.Completed)
                                {
                                    <MudBadge BadgeClass="mud-stepper-badge" Overlap="true" Bordered="true" Color="@Color" Icon="@Icons.Material.Filled.Done">
                                        <MudAvatar Style="@AvatarStylename" Color="@Color" Variant="@Variant" Size="@HeaderSize">
                                            @if (!string.IsNullOrWhiteSpace(step.Icon))
                                            {
                                                <MudIcon Class="pa-1" Icon="@step.Icon" Size="@HeaderSize" />
                                            }
                                        </MudAvatar>
                                    </MudBadge>
                                }
                                else
                                {
                                    Color incompleteColor = (HeaderBadgeView == HeaderBadgeView.GreyOutIncomplete) && !active ? Color.Transparent : @Color;
                                    <MudAvatar Style="@AvatarStylename" Color="@incompleteColor" Variant="@Variant" Size="@HeaderSize">
                                        <MudIcon Class="pa-1" Icon="@step.Icon" Size="@HeaderSize" />
                                    </MudAvatar>
                                }
                                @if (HeaderTextView == HeaderTextView.All || HeaderTextView == HeaderTextView.OnlyActiveText)
                                {
                                    <MudText Align="Align.Center" Class="mt-n1">
                                        @if (step.MudStepperExtended.GetActiveIndex() == @step.MudStepperExtended.Steps.IndexOf(@step))
                                        {
                                            <MudText Color="@(step.Status != StepStatus.Continued ? Color : Color.Inherit)"><b>@step.Title</b></MudText>
                                        }
                                        else if (HeaderTextView != HeaderTextView.OnlyActiveText)
                                        {
                                            <MudText Color="@(step.Status != StepStatus.Continued ? Color : Color.Inherit)">@step.Title</MudText>
                                        }
                                    </MudText>
                                }
                            }
                        </div>
                    </div>
                }
            </div>
            @if (MobileView == true)
            {
                <MudText Style="@GetMobileStyle()" Typo="Typo.body2" Color="@Color">@(_steps?.IndexOf(currentStep ?? new()) + 1) / @(_steps?.Count)</MudText>
            }
            <MudProgressLinear Vertical="@Vertical" Color="@Color" Value="@ProgressValue" Min="0" Max="100" Style="@GetProgressLinearStyle()" />

        </div>
        @if (Loading)
        {
            <MudProgressLinear Indeterminate="true" Color="@Color" />
        }
        @StaticContent
        <MudStack Class="mud-width-full" Justify="Justify.SpaceBetween">
            <div class="@ContentClassname" style="@ContentStyle">
                @ChildContent
            </div>
            @if (ShowPreviousButton == true || ShowNextButton == true || ShowSkipButton == false)
            {
                <div class="@ActionClassname">

                    @{
                        bool showResultStep = ShowResultStep();
                    }

                    @if (StepperActionsJustify == StepperActionsJustify.End)
                    {
                        @if (ActionContent != null)
                        {
                            <MudSpacer />
                            @ActionContent
                        }
                    }

                    @if (ShowPreviousButton && ActiveIndex != 0)
                    {
                        if (IconActionButtons || MobileView)
                        {
                            <MudTooltip Text="@LocalizedStrings.Previous" Delay="300">
                                <MudIconButton Color="@Color" Variant="@Variant" Icon="@Icons.Material.Filled.ChevronLeft" OnClick="@(() => SetActiveIndex(-1))" />
                            </MudTooltip>
                        }
                        else
                        {
                            <MudButton Color="@Color" Variant="@Variant" OnClick="@(() => SetActiveIndex(-1))">@LocalizedStrings.Previous</MudButton>
                        }
                    }

                    @if (ActionContent != null && StepperActionsJustify != StepperActionsJustify.End)
                    {
                        @* The user will provide their own MudSpacer in this render fragment *@
                        @ActionContent
                    }
                    @if (StepperActionsJustify == StepperActionsJustify.SpaceBetween)
                    {
                        <MudSpacer />
                    }

                    @if (showResultStep == false)
                    {
                        if ((ActiveIndex < Steps.Count && Steps[ActiveIndex].Status != StepStatus.Continued) || (ActiveIndex == Steps.Count - 1 && HasResultStep() == false && IsAllStepsCompleted()))
                        {
                            if (ShowStepResultIndicator && MobileView == false)
                            {
                                <MudButton Color="@Color" Variant="Variant.Text" Disabled="true">@(Steps[ActiveIndex].Status == StepStatus.Completed ? LocalizedStrings.Completed : LocalizedStrings.Skipped)</MudButton>
                            }
                        }
                        else if (ActiveIndex < Steps.Count && Steps[ActiveIndex].Optional == true)
                        {
                            if (ShowSkipButton)
                            {
                                if (IconActionButtons || MobileView)
                                {
                                    <MudTooltip Text="@LocalizedStrings.Skip" Delay="300">
                                        <MudIconButton Color="@Color" Variant="@Variant" Icon="@Icons.Material.Filled.SkipNext" OnClick="@(() => SkipStep(ActiveIndex))" />
                                    </MudTooltip>
                                }
                                else
                                {
                                    <MudButton Color="@Color" Variant="@Variant" OnClick="@(() => SkipStep(ActiveIndex))">@LocalizedStrings.Skip</MudButton>
                                }

                            }
                        }
                    }

                    @if (showResultStep == false && ShowNextButton && !(ActiveIndex == Steps.Count - 1 && HasResultStep() == false && IsAllStepsCompleted()))
                    {
                        if (ActiveIndex < Steps.Count && Steps[ActiveIndex].Status != StepStatus.Continued)
                        {
                            if (IconActionButtons || MobileView)
                            {
                                <MudTooltip Text="@GetNextButtonString()" Delay="300">
                                    <MudIconButton Color="@Color" Variant="@Variant" Icon="@Icons.Material.Filled.ChevronRight" OnClick="@(() => SetActiveIndex(1))" />
                                </MudTooltip>
                            }
                            else
                            {
                                <MudButton Color="@Color" Variant="@Variant" OnClick="@(() => SetActiveIndex(1))">@GetNextButtonString()</MudButton>
                            }
                        }
                        else
                        {
                            if (IconActionButtons || MobileView)
                            {
                                <MudTooltip Text="@GetNextButtonString()" Delay="300">
                                    <MudIconButton Color="@Color" Variant="@Variant" Icon="@Icons.Material.Filled.ChevronRight" OnClick="@(() => CompleteStep(ActiveIndex))" />
                                </MudTooltip>
                            }
                            else
                            {
                                <MudButton Color="@Color" Variant="@Variant" OnClick="@(() => CompleteStep(ActiveIndex))">@GetNextButtonString()</MudButton>
                            }

                        }
                    }
                </div>
            }
        </MudStack>
    </MudStack>
</CascadingValue>

@if (Animation == true)
{
    <MudAnimate @ref="_animate" Selector="@($".mud-stepper-ani-{_animateGuid.ToString()}")" AnimationType="AnimationType.Fade" Value="1" Duration="0.5" />
}

